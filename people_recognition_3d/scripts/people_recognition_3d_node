#!/usr/bin/env python

# ROS modules
import math

import rospy
import message_filters
from sensor_msgs.msg import Image, CameraInfo
from visualization_msgs.msg import MarkerArray

# People recognition 3D modules
from people_recognition_3d import PeopleRecognizer3D
from people_recognition_msgs.msg import People3D
from people_recognition_msgs.srv import RecognizePeople3D, RecognizePeople3DResponse


class PeopleRecognition3DNode:
    def __init__(self):
        recognize_people_srv_name = rospy.get_param(
            '~recognize_people_srv_name', "detect_people")
        probability_threshold = float(
            rospy.get_param('~probability_threshold', 0.2))
        link_threshold = float(rospy.get_param('~link_threshold', 0.5))
        heuristic = rospy.get_param('~heuristic', 'shoulder')
        arm_norm_threshold = rospy.get_param('~arm_norm_threshold', 0.5)
        neck_norm_threshold = rospy.get_param('~neck_norm_threshold', 0.7)
        wave_threshold = rospy.get_param('~wave_threshold', 0.2)
        vert_threshold = rospy.get_param('~vert_threshold', 0.7)
        hor_threshold = rospy.get_param('~hor_threshold', 0.4)
        padding = rospy.get_param('~padding', 5)

        enable_topic_mode = rospy.get_param('~enable_topic_mode', False)

        self._people_recognizer_3d = PeopleRecognizer3D(
            recognize_people_srv_name, probability_threshold, link_threshold,
            heuristic, arm_norm_threshold, neck_norm_threshold, wave_threshold,
            vert_threshold, hor_threshold, padding)

        self._markers_pub = rospy.Publisher('~viz',
                                            MarkerArray,
                                            queue_size=1)
        self._regions_viz_pub = rospy.Publisher('~regions_viz',
                                                Image,
                                                queue_size=1)

        self._people_pub = rospy.Publisher('people3d', People3D, queue_size=1)
        if enable_topic_mode:
            rospy.loginfo("Topic mode enabled")

            depth_info_sub = message_filters.Subscriber(
                'camera_info_depth', CameraInfo)
            rospy.loginfo("Subscribing to: {}".format(
                depth_info_sub.sub.resolved_name))

            depth_sub = message_filters.Subscriber('depth', Image)
            rospy.loginfo("Subscribing to: {}".format(
                depth_sub.sub.resolved_name))

            rgb_sub = message_filters.Subscriber('rgb', Image)
            rospy.loginfo("Subscribing to: {}".format(
                rgb_sub.sub.resolved_name))

            # self._ts = message_filters.TimeSynchronizer([rgb_sub, depth_sub, depth_info_sub], 1)
            self._ts = message_filters.ApproximateTimeSynchronizer(
                [rgb_sub, depth_sub, depth_info_sub], queue_size=1, slop=10)

            self._ts.registerCallback(self._topic_callback)

        # Define the service only after PeopleRecognizer has initialized
        # completely else an early service call can be made causing errors
        self._recognize_people_3d_srv = rospy.Service(
            'detect_people_3d', RecognizePeople3D,
            self._recognize_people_3d_srv)

        rospy.loginfo("PeopleRecognition3DNode initialized:")

    def _recognize_people_3d_srv(self, req):
        """
        Callback when the RecognizePeople3D service is called
        :param req: RecognizePeople3DRequest (with .image_rgb, .image_depth and
            .camera_info_depth attributes)
        :return: RecognizePeople3DResponse (with a .people attribute)
        """
        # Convert to opencv images
        rospy.loginfo(
            "[Service Call] Detecting people in 3D from incoming RGB-D image..."
        )
        try:
            people3d, markers, regions_viz = self._people_recognizer_3d.recognize(
                req.image_rgb, req.image_depth, req.camera_info_depth)
        except Exception as e:
            rospy.logerr(
                "[Service Call] Exception while recognizing people in 3D")
            raise
        else:
            self._markers_pub.publish(markers)
            self._regions_viz_pub.publish(regions_viz)
            self._people_pub.publish(People3D(image_rgb=req.image_rgb, image_depth=req.image_depth, camera_info_depth=req.camera_info_depth, people=people3d))
            return RecognizePeople3DResponse(people=people3d)

    def _topic_callback(self, rgb, depth, depth_info):
        rospy.loginfo(
            "[Topic Mode] Detecting people in 3D from incoming RGB-D image...")
        try:
            people3d, markers, regions_viz = self._people_recognizer_3d.recognize(
                rgb, depth, depth_info)
        except Exception as e:
            rospy.logerr(
                "[Topic Mode] Exception while recognizing people in 3D")
            raise
        else:
            self._markers_pub.publish(markers)
            self._regions_viz_pub.publish(regions_viz)
            self._people_pub.publish(People3D(image_rgb=rgb, image_depth=depth, camera_info_depth=depth_info, people=people3d))


if __name__ == '__main__':
    rospy.init_node('people_recognition_3d')
    try:
        node = PeopleRecognition3DNode()
        rospy.spin()
    except rospy.exceptions.ROSInterruptException:
        pass
