#!/usr/bin/env python

import rospy
from cv_bridge import CvBridge

from people_recognition_2d import PeopleRecognizer2D
from people_recognition_msgs.srv import RecognizePeople2D, RecognizePeople2DResponse
from sensor_msgs.msg import Image


class PeopleRecognition2DNode:
    def __init__(self):

        pose_estimation_srv_name = self._get_param('~pose_estimation_srv_name', "pose_estimation/recognize")
        face_recognition_srv_name = self._get_param('~face_recognition_srv_name', "face_recognition/recognize")
        face_properties_srv_name = self._get_param('~face_properties_srv_name', "face_recognition/get_face_properties")
        color_extractor_srv_name = self._get_param('~color_extractor_srv_name', "extract_color")
        enable_age_gender_detection = self._get_param('~enable_age_gender_detection', True)
        enable_shirt_color_extraction = self._get_param('~enable_shirt_color_extraction', True)

        self._people_recognizer = PeopleRecognizer2D(pose_estimation_srv_name,
                                                     face_recognition_srv_name,
                                                     face_properties_srv_name,
                                                     color_extractor_srv_name,
                                                     enable_age_gender_detection,
                                                     enable_shirt_color_extraction,
                                                     )

        # Define the service only after PeopleRecognizer2D has initialized
        # completely else an early service call can be made causing errors
        self._detect_people_srv = rospy.Service('detect_people', RecognizePeople2D, self._detect_people_srv)

        self._cv_bridge = CvBridge()
        self._result_image_publisher = rospy.Publisher('~result_image', Image, queue_size=1)
        rospy.loginfo("PeopleRecognitionNode initialized")

    @staticmethod
    def _get_param(name, default):
        if rospy.has_param(name):
            return rospy.get_param(name)
        else:
            rospy.logwarn('parameter %s not set, using the default value of %s', name, default)
            return rospy.get_param(name, default)

    def _detect_people_srv(self, req):
        """
        Callback when the RecognizePeople2D service is called
        :param req: RecognizePeople2DRequest (with a .image attribute)
        :return: RecognizePeople2DResponse (with a .people attribute)
        """
        rospy.loginfo("Detecting people in incoming Image message...")
        try:
            person_2d_array, result_image = self._people_recognizer.recognize(req.image)
        except Exception as e:
            rospy.logerr("[Service Call] Exception while recognizing people in 2D")
            raise
        else:
            rospy.loginfo("Done. Found {} people.".format(len(person_2d_array)))
            self._result_image_publisher.publish(self._cv_bridge.cv2_to_imgmsg(result_image, "rgb8"))
            return RecognizePeople2DResponse(people=person_2d_array)


if __name__ == '__main__':
    rospy.init_node('people_recognition_2d')
    try:
        node = PeopleRecognition2DNode()
        rospy.spin()
    except rospy.exceptions.ROSInterruptException:
        pass
