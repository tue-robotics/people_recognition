#!/usr/bin/env python

import rospy
from cv_bridge import CvBridge

from people_tracking import PeopleTracker
from sensor_msgs.msg import Image


class PeopleTrackingNode:
    def __init__(self):

        openpose_srv_name = self._get_param('~openpose_srv_name', "openpose/recognize")
        #openface_srv_name = self._get_param('~openface_srv_name', "face_recognition/recognize")
        #keras_srv_name = self._get_param('~keras_srv_name', "face_recognition/get_face_properties")
        #color_extractor_srv_name = self._get_param('~color_extractor_srv_name', "extract_color")
        #enable_age_gender_detection = self._get_param('~enable_age_gender_detection', True)
        #enable_shirt_color_extraction = self._get_param('~enable_shirt_color_extraction', True)

        self._people_tracker = PeopleTracker(openpose_srv_name)

        self._cv_bridge = CvBridge()
        self._result_image_publisher = rospy.Publisher('~result_image', Image, queue_size=1)
        rospy.loginfo("PeopleRecognitionNode initialized")

    @staticmethod
    def _get_param(name, default):
        if rospy.has_param(name):
            return rospy.get_param(name)
        else:
            rospy.logwarn('parameter %s not set, using the default value of %s', name, default)
            return rospy.get_param(name, default)

if __name__ == '__main__':
    rospy.init_node('people_tracking')
    try:
        node = PeopleTrackingNode()
        rospy.spin()
    except rospy.exceptions.ROSInterruptException:
        pass
